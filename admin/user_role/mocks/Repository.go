// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	models "github.com/bxcodec/go-clean-arch/models"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ur
func (_m *Repository) Delete(ur *models.UserRole) error {
	ret := _m.Called(ur)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.UserRole) error); ok {
		r0 = rf(ur)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() ([]models.UserRole, error) {
	ret := _m.Called()

	var r0 []models.UserRole
	if rf, ok := ret.Get(0).(func() []models.UserRole); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserRole)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserRoleByUserIdAndRoleId provides a mock function with given fields: userId, roleId
func (_m *Repository) FindUserRoleByUserIdAndRoleId(userId int, roleId int) (models.UserRole, error) {
	ret := _m.Called(userId, roleId)

	var r0 models.UserRole
	if rf, ok := ret.Get(0).(func(int, int) models.UserRole); ok {
		r0 = rf(userId, roleId)
	} else {
		r0 = ret.Get(0).(models.UserRole)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userId, roleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ur
func (_m *Repository) Store(ur *models.UserRole) error {
	ret := _m.Called(ur)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.UserRole) error); ok {
		r0 = rf(ur)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
